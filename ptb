import telebot
import subprocess
import datetime
import time

bot = telebot.TeleBot('6925513309:AAF0cvVjiwGzKPjyNhZgZfB48N0V5BfNlm0')

def add_task():
  password = input("Введите пароль: ")
  if password != "1234":
      print("Wrong password!")
      return


  task_name = input("Введите название задачи: ")
  task_description = input("Введите описание задачи: ")
  f = open('tasks.txt', 'r+')
  f.truncate(0)
  with open("tasks.txt", "a") as f:
      f.write(f" {task_name}\n")
      f.write(f" {task_description}\n")
      f.write("-" * 20 + "\n")

  print("Задача успешно добавлена!")


def view_current_task():
  with open("tasks.txt", "r") as f:
      lines = f.readlines()
      if lines:
          current_task = lines[-3:-1]
          print("Current task:")
          print("---------------")
          print("Name:", current_task[0].strip())
          print("Description:", current_task[1].strip())
      else:
          print("No tasks found!")


def remove_task():
    with open("tasks.txt", "r") as f:
        lines = f.readlines()
        if lines:
            last_three_lines = lines[-3:]
            print("Current task:")
            print("---------------")
            print("Name:", last_three_lines[0].strip())
            print("Description:", last_three_lines[1].strip())

            choice = input("Delite this task? (y/n): ")
            if choice.lower() == "y":
                with open("tasks.txt", "w") as f:
                    f.writelines(lines[:-3])
                print("Task delite!")
            else:
                print("Delite cancelled!")
        else:
            print("no tasks found!")


def add_task_with_deadline():
    password = input("Введите пароль: ")
    if password != "1":
        print("Неправильный пароль!")
        return

    deadline_date = input("Введите дату дедлайна в формате ГГГГ-ММ-ДД ЧЧ:ММ ")
    deadline_timestamp = time.mktime(time.strptime(deadline_date, "%Y-%m-%d %H:%M"))

    task_name = input("Введите название задачи: ")
    task_description = input("Введите описание задачи: ")
    with open("tasks.txt", "a") as f:
        f.write(f" Дедлайн: {deadline_date}\n")
        f.write(f"Название задачи: {task_name}\n")
        f.write(f"{task_description}\n")
        f.write("-" * 20 + "\n")
    print("Задача с дедлайном добавлена успешно")

    if time.time() > deadline_timestamp:
        open("tasks.txt", 'w').close()
        print("Дедлайн прошел, файл tasks.txt очищен")
    else:
        print("Дедлайн еще не истек")

def main():

    while True:
        print("1. Change task")
        print("2. Current task")
        print("3. Delite current task")
        print("4. Add tasks with deadline(pre-alpha version)")
        print("5. Exit")

        choice = input("Choose the option: ")

        if choice == "1":
            add_task()
        elif choice == "2":
            view_current_task()
        elif choice == "3":
            remove_task()
        elif choice == "4":
            add_task_with_deadline()
        elif choice == "5":
            break
        else:
            print("I'm sorry, I didn't know this number. Please try again")



if __name__ == "__main__":
    main()

teacher_code = ""  # Переменная для хранения кода учителя

@bot.message_handler(commands=['start'])
def handle_start(message):
    instructions = "Welcome to the code verification bot!\n\n" \
                   "Instructions for use:\n" \
                   "- Enter /task to get the task\n" \
                   "- Upload the file with the code *.py \n"\
                   "- The bot will run tests using pytest and report the result\n"\
                   "- Enter /commands to get a list of available commands\n"\
                   "- Enter /help to get help and instruction"

    bot.reply_to(message, instructions)

@bot.message_handler(commands=['commands'])
def handle_commands(message):
    commands = "List of available commands:\n" \
               "/start - Start working with the bot\n" \
               "/task - Get a new task\n" \
               "/commands - Display a list of all commands in the chat\n" \
               "/help - Get help and instructions"

    bot.reply_to(message, commands)

@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = "Instructions for using the bot:\n" \
                "- Enter /task to get the task\n" \
                "- Upload the file with the code .py to solve the problem\n" \
                "- The bot will run the tests using py test and report the result"

    bot.reply_to(message, help_text)

@bot.message_handler(commands=['task'])
def handle_task(message):
  with open("tasks.txt", "r") as f:
    lines = f.readlines()
    if lines:
        current_task = lines[-3:-1]
        bot.reply_to(message, current_task[1].strip())
    else:
        bot.reply_to(message, "No tasks found! U can relax =)")

@bot.message_handler(content_types=['document'])
def handle_code(message):
    global teacher_code

    if message.document.mime_type == 'text/x-python':
        if message.from_user.id == 'https://t.me/UnkoNum':
            # Получаем файл с кодом учителя
            file_info = bot.get_file(message.document.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            teacher_code = downloaded_file.decode("utf-8")  # Сохраняем код учителя
            bot.reply_to(message, "The teacher's code has been successfully added.")
        else:
            # Получаем файл с кодом ученика
            file_info = bot.get_file(message.document.file_id)
            file_path = file_info.file_path
            downloaded_file = bot.download_file(file_path)
            student_code = downloaded_file.decode("utf-8")  # Сохраняем код ученика

            # Выполняем тесты с помощью pytest
            result = run_tests(student_code, teacher_code)

            bot.reply_to(message, result)
    else:
        bot.reply_to(message, 'Please download the file with the .py extension.')


def run_tests(student_code, teacher_code):
    # Здесь можно добавить логику выполнения тестов с помощью pytest,
    # сравнивая результат работы ученика и учителя

    return 'Result of tests'


bot.polling()
